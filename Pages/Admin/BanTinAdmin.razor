@page "/admin/ban-tin/{id?}"

@layout AdminLayout
@using CharityClinic.Services;
@using CharityClinic.Data.Model;
@inject IBaseService<NewsDb> NewsService
@inject IJSRuntime JS
@inject IHostEnvironment Environment
@inject ILogger<BanTinAdmin> Logger

@if (!string.IsNullOrEmpty(message))
{
    <div class="col-12" style="color: limegreen;">
        @message
    </div>
}else{
@if (string.IsNullOrEmpty(id))
{
    <h3>Create News</h3>
}
else
{
    <h3>Update News</h3>
}
@*<EditForm Model="newsDB" OnValidSubmit="CreateNews">*@
<form @onsubmit="CreateNews" action="javascript:void(0);">
    @if (newsDB.Content == "")
    {
        <div class="col-12" style="color: red;">
            The Content field is required.
        </div>
    }
    @if (newsDB.Tiltle == "")
    {
        <div class="col-12" style="color: red;">
            The Tiltle field is required.
        </div>
    }
    @if (successCreate > 0 && string.IsNullOrEmpty(id))
    {
        <div class="col-12" style="color: limegreen;">
            Tạo Bản Tin thành công.
        </div>
    }
    
    @if (imagePath == "")
    {
        <div class="col-12" style="color: red;">
            The Image field is required.
        </div>
    }
    else if (successCreate > 0 && !string.IsNullOrEmpty(id))
    {
        <div class="col-12" style="color: limegreen;">
            Update Bản Tin thành công.
        </div>
    }
    <div class="form-group">
        <label>Title</label>
        <input @bind="newsDB.Tiltle" class="form-control" />
        <label>Image</label>
        @if (errorMaxSize)
        {
            <div class="col-12" style="color: red;">
                The Image too large.
            </div>
        }
        <InputFile OnChange="@LoadFiles" id="file-input" accept="image/*" class="form-control"/>
        <div class="result">
            <img id="img-preview" src="@imagePath" alt="image" style="height: 200px;" />
        </div>
        <label>Content</label>
        <textarea id="Content" @bind="newsDB.Content" class="form-control" />
        <span asp-validation-for="Content"></span>
    </div>

    @if (string.IsNullOrEmpty(id))
    {
            <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#exampleModal" @onclick="CreateNews" disabled="@IsDisabled">
            @if (IsDisabled)
            {
                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
            }
            Create
        </button>
    }
    else
    {
            <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#exampleModal" @onclick="CreateNews" disabled="@IsDisabled">
            @if (IsDisabled)
            {
                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
            }
            Update
        </button>
    }
    </form>
    }
<div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="exampleModalLabel">Thông báo</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                @if (IsDisabled)
                {
                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                }
                else
                {
                    @if (successCreate > 0 && string.IsNullOrEmpty(id))
                    {
                        <div class="col-12" style="color: limegreen;">
                            Tạo thành công.
                        </div>
                    }
                    else if (successCreate > 0 && !string.IsNullOrEmpty(id))
                    {
                        <div class="col-12" style="color: limegreen;">
                            Update thành công.
                        </div>
                    }
                    else
                    {
                        <div class="col-12" style="color: red;">
                            Update or Create không thành công.
                        </div>
                    }
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>
@*</EditForm>*@
@code {
    [Parameter]
    public string? id { get; set; }
    private NewsDb newsDB = new();
    private int successCreate = 0;
    public bool IsDisabled { get; set; }
    private string imagePath = null;
    private string message = "";
    protected async override void OnInitialized()
    {
        try
        {
            message = "";
            await JS.InvokeVoidAsync("import", "./js/admin/tinymce.min.js");
            if (!string.IsNullOrEmpty(id))
            {
                var path = Path.Combine("NewsContent", id);
                await JS.InvokeVoidAsync("init", path);

            }
            else
            {
                var ChamSoc = (await NewsService.GetAll());
                var nextId = 1;
                if (ChamSoc.Count() > 0)
                    nextId = ChamSoc.OrderByDescending(d => d.Id).FirstOrDefault().Id + 1;
                var path = Path.Combine("NewsContent", nextId.ToString());
                await JS.InvokeVoidAsync("init", path);

            }
            if (!string.IsNullOrEmpty(id))
            {
                newsDB = await NewsService.Get(id);
                if(newsDB != null)
                {
                    imagePath = newsDB.PathImg;
                    if (!string.IsNullOrEmpty(newsDB.Content))
                        await JS.InvokeAsync<string>("setContent", newsDB.Content);
                    StateHasChanged();
                }
                else
                {
                    message = "Id không tồn tại";
                }
            }
            await JS.InvokeVoidAsync("LoadImage");
            StateHasChanged();
        }
        catch
        {

        }
    }
    private async Task CreateNews()
    {
        try
        {
            IsDisabled = true;
            newsDB.Id = 0;
            newsDB.Content = await JS.InvokeAsync<string>("getContent", null);
            newsDB.PathImg = imagePath;
            if (string.IsNullOrEmpty(newsDB.Tiltle))
            {
                newsDB.Tiltle = "";
            }
            if (string.IsNullOrEmpty(imagePath))
            {
                imagePath = "";
            }
            if (!string.IsNullOrEmpty(newsDB.Content) && !string.IsNullOrEmpty(newsDB.Tiltle) && !string.IsNullOrEmpty(imagePath))
            {
                if (string.IsNullOrEmpty(id))
                {
                    newsDB.TimeCreate = DateTime.Now;
                    successCreate = await NewsService.Create(newsDB);
                }
                else
                {
                    newsDB.Id = int.Parse(id);
                    successCreate = await NewsService.Update(newsDB);
                }
            }
            IsDisabled = false;
            StateHasChanged();
        }
        catch (Exception e)
        {

        }
    }
    private List<IBrowserFile> loadedFiles = new();
    private int maxAllowedFiles = 1;
    private long maxFileSize = 10 * 1024 * 1024;
    private bool errorMaxSize = false;

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        errorMaxSize = false;
        loadedFiles.Clear();
        try
        {
            foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
            {
                var trustedFileNameForFileStorage = Path.GetRandomFileName();
                var path = Path.Combine(Environment.ContentRootPath, "wwwroot", "BanTin");
                if (!Directory.Exists(path))
                {
                    Directory.CreateDirectory(path);
                }
                try
                {
                    if (!string.IsNullOrEmpty(id))
                    {
                        if (File.Exists(Path.Combine(path, id + ".jpg")))
                        {
                            File.Delete(Path.Combine(path, id + ".jpg"));
                        }
                        await using FileStream fs = new(Path.Combine(path, id + ".jpg"), FileMode.Create);
                        imagePath = Path.Combine("BanTin", id + ".jpg");
                        await file.OpenReadStream(maxFileSize).CopyToAsync(fs);
                        loadedFiles.Add(file);
                        fs.Close();
                    }
                    else
                    {
                        var SucKhoe = (await NewsService.GetAll());
                        var nextId = 1;
                        if (SucKhoe.Count() > 0)
                            nextId = SucKhoe.OrderByDescending(d => d.Id).FirstOrDefault().Id + 1;
                        if (File.Exists(Path.Combine(path, nextId + ".jpg")))
                        {
                            File.Delete(Path.Combine(path, nextId + ".jpg"));
                        }
                        await using FileStream fs = new(Path.Combine(path, nextId + ".jpg"), FileMode.Create);
                        imagePath = Path.Combine("BanTin", nextId + ".jpg");
                        await file.OpenReadStream(maxFileSize).CopyToAsync(fs);
                        loadedFiles.Add(file);
                        fs.Close();
                    }

                }
                catch (Exception ex)
                {
                    errorMaxSize = true;
                    imagePath = "";
                    Logger.LogError("File: {Filename} Error: {Error}",
                        file.Name, ex.Message);
                    StateHasChanged();
                }
            }
        }
        catch (Exception ex)
        {

            throw;
        }
    }
}
